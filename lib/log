#!/usr/bin/env bash
#
# ##############################################################################
# SCRIPT:       log
# AUTHOR:       jam82
# VERSION:      1.0.0
# DATE:         25.03.2022
# LICENSE:      MIT
# DESCRIPTION:  wrapper for writing logs to stdout, syslog or systemd-journal
# ##############################################################################

set -o errexit
set -o nounset
set -o pipefail

# app named used for systemd-cat -t when logging to journal, journcalctl -t mira
declare -r logname=mira
# log date rfc-3339 format (date, seconds or ns); when empty, date is not logged
declare -r logdate=
# print loglevel and function names, if true; only for log_stderr
declare -r logdebug=
# log to logfile, if not empty
declare -r logfile=
# log to systemd journal with systemd-cat, if not empty
declare -r logjournal=1
# log level, all levels less or equal are logged to stderr
declare -r loglevel=7

# associative array for log levels as used by syslog / systemd-cat
declare -A loglevels

loglevels[0]=emerg
loglevels[1]=alert
loglevels[2]=crit
loglevels[3]=err
loglevels[4]=warning
loglevels[5]=notice
loglevels[6]=info
loglevels[7]=debug

# colors to use in stdout with cprintf function, e.g. cprintf blue "blue text"
declare -A colors

colors[black]="\033[0;30m"
colors[blackb]="\033[1;30m"
colors[red]="\033[0;31m"
colors[redb]="\033[1;31m"
colors[green]="\033[0;32m"
colors[greenb]="\033[1;32m"
colors[yellow]="\033[0;33m"
colors[yellowb]="\033[1;33m"
colors[blue]="\033[0;34m"
colors[blueb]="\033[1;34m"
colors[purple]="\033[0;35m"
colors[purpleb]="\033[1;35m"
colors[cyan]="\033[0;36m"
colors[cyanb]="\033[1;36m"
colors[gray]="\033[0;37m"
colors[white]="\033[1;37m"
colors[normal]="\033[0m"
colors[bold]="\033[1m"

# associative array for colors per log level, when logged to stderr
declare -A logcolors

logcolors[0]=${colors['purpleb']}
logcolors[1]=${colors['purple']}
logcolors[2]=${colors['redb']}
logcolors[3]=${colors['red']}
logcolors[4]=${colors['yellowb']}
logcolors[5]=${colors['greenb']}
logcolors[6]=${colors['cyanb']}
logcolors[7]=${colors['white']}

# ------------------------------------------------------------------------------
# FUCTION:  cprintf
# GLOBALS:  colors
# PARAMETERS:
#   - $1 =  <string> color
#   - $2 =  <string> text to print
#   - $3 =  <int> optional column width, i.e. -16 = printf "%-16b" ...
#           DEFAULT: ''
# RETURNS:  <int> $?
# DESCRIPTION: print color formatted string to stderr
# ------------------------------------------------------------------------------
cprintf() {
    printf "%${3:-''}b" "${colors[${1}]}${2}${colors['normal']}" 1>&2
}

# ------------------------------------------------------------------------------
# FUCTION:  log_file
# GLOBALS:  FUNCNAME loglevels logfile
# PARAMETERS:
#   - $1 =  <int> log level as integer
#   - $2 =  <string> log message
# RETURNS:  <int> $?
# DESCRIPTION: write tsv formatted logfile, format:
# <date>\t<loglevel>\t<script.function()>\t<message>\n
# ------------------------------------------------------------------------------
log_file() {
    printf "%s\t%s\t%s\t%s\n" \
        "$(date --rfc-3339 "${logdate:-seconds}")" \
        "${loglevels[${1}]^^}" \
        "$(basename "${0}").${FUNCNAME[4]}()" \
        "${2}" \
        >> "${logfile}"
}

# ------------------------------------------------------------------------------
# FUCTION:  log_journal
# GLOBALS:  logname loglevels
# PARAMETERS:
#   - $1 =  <int> log level as integer
#   - $2 =  <string> log message
# RETURNS:  <int> $?
# DESCRIPTION: log to systemd-journal
# ------------------------------------------------------------------------------
log_journal() {
    printf "%s\n" "${2}" | systemd-cat -t "${logname}" -p "${loglevels[${1}]}"
}

# ------------------------------------------------------------------------------
# FUCTION:  log_stderr
# GLOBALS:  FUNCNAME logcolors logdate logdebug loglevels
# PARAMETERS:
#   - $1 =  <int> log level as integer
#   - $2 =  <string> log message
# RETURNS:  <int> $?
# DESCRIPTION: log to systemd-journal
# ------------------------------------------------------------------------------
log_stderr() {
    local pre

    # print loglevel to $pre
    printf -v pre "%-8s" "${loglevels[${1}]^^}"

    # only print date on stderr, if logdate is set
    if [ "${logdate}" ]; then
        printf -v pre "%s %s" "$(date --rfc-3339 "${logdate}")" "${pre}"
    fi
    # only print caller and function on stderr, if logdebug is set
    if [ "${logdebug}" ]; then
        printf -v pre "%s %-24s " "${pre}" "$(basename "${0}").${FUNCNAME[4]}()"
    fi

    # print prefix in normal color, print message/$1 with $logcolors to <stderr>
    printf "%b%s%b\n" "${pre}${logcolors[${1}]}" "${2}" "${colors['normal']}" 1>&2
}

# ------------------------------------------------------------------------------
# FUCTION:  log
# GLOBALS:  loglevels loglevel $FUNCNAME $0
# PARAMETERS:
#   - $1 =  <int> log level as integer
#   - $2 =  <string> log message
# RETURNS:  <string> date formatted log message
# DESCRIPTION: meta log function used by log_<loglevel>
# ------------------------------------------------------------------------------
log() {
    # always log to stderr, if level <= loglevel
    if [ "${1}" -le "${loglevel}" ]; then
        log_stderr "${1}" "${2}"

        # log to file, if path to logfile is defined in logfile
        if [ "${logfile}" ]; then
            log_file "${1}" "${2}"
        fi
        # log to journal, if logjournal has a value
        if [ "${logjournal}" ]; then
            log_journal "${1}" "${2}"
        fi
    fi

    return 0
}

# loglevel 0 - EMERG
log_emerg() {
    log 0 "$@"
    exit 7 # 7-loglevel
}

# loglevel 1 - ALERT
log_alert() {
    log 1 "$@"
    exit 6 # 7-loglevel
}

# loglevel 2 - CRIT
log_crit() {
    log 2 "$@"
    exit 5 # 7-loglevel
}

# loglevel 3 - ERR
log_err() {
    log 3 "$@"
    exit 4 # 7-loglevel
}

# loglevel 4 - WARNING
log_warning() {
    log 4 "$@"
    return 0
}

# loglevel 5 - NOTICE
log_notice() {
    log 5 "$@"
    return 0
}

# loglevel 6 - INFO
log_info() {
    log 6 "$@"
    return 0
}

# loglevel 7 - DEBUG
log_debug() {
    log 7 "$@"
    return 0
}
